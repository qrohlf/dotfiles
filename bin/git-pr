#!/usr/bin/env node

// Open the current Github PR for your current branch by running `git pr`
//
// Requires a personal access token to be saved to a file in ~/.gh_token,
// grab an access token here:
// https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/
//
// Also requires an `upstream` or `origin` remote to be configured and pointing
// at a github repo
const https = require('https')
const path = require('path')
const url = require('url')
const {homedir} = require('os')
const {execSync} = require('child_process')
const {readFileSync} = require('fs')

const THREE_DAYS_AGO = (() => {
  const d = new Date()
  d.setDate(d.getDate() + 3)
  return d.toISOString()
})()

const get = (path, options) => new Promise((resolve, reject) => {
  const opts = {
    protocol: 'https:',
    host: 'api.github.com',
    path,
  ...options}
  const req = https.get(opts, res => {
    let body = ''
    res.on('data', chunk => {
      body += chunk
    })
    res.on('end', () => {
      res.statusCode === 200
        ? resolve(JSON.parse(body))
        : reject(Error(`request failed with status code ${res.statusCode}: ${body}`))
    })
  })
  req.on('error', reject)
})

const open = (url) => {
  process.platform === 'darwin'
    ? execSync(`open "${url}"`)
    : execSync(`xdg-open "${url}"`)
}

const cmd = (script) => execSync(script, {encoding: 'utf8'}).trim()

const main = async () => {

  const upstream = (() => {
    try {
      return cmd('git config --get remote.upstream.url')
    } catch (_) {
      return cmd('git config --get remote.origin.url')
    }
  })()
  const repo = upstream.match(/github.com[:/]([^\s]+).git$/)[1]
  const branch = cmd('git rev-parse --abbrev-ref HEAD')
  const token = readFileSync(path.join(homedir(), '.gh_token'), {encoding: 'utf8'}).trim()

  const query = `head:"${branch}" repo:"${repo}"`

  // TODO - order by date DESC
  const search = `/search/issues?q=${encodeURIComponent(query)}`
  const headers = {
    'Authorization': `token ${token}`,
    'User-Agent': '@qrohlf/git-pr'
  }

  try {
    const {items} = await get(search, {headers})

    if (items.length > 1) {
      const webSearch = `https://github.com/issues?utf8=âœ“&q=${encodeURIComponent(query)}`
      console.log(`multiple PRs found, see ${webSearch} for list`)
    }

    if (items.length === 1) {
      const item = items[0]
      const url = items[0].html_url
      const isFresh = (!item.closed_at) || (item.closed_at > THREE_DAYS_AGO)
      if (isFresh) {
        console.log('ðŸŒŽ opening ' + url + '\n')
        open(url)
        process.exit(0)
      } else {
        console.log(`Found closed PR at ${url}; skipping.`)
      }
    }

    const createPullURL = `https://github.com/${repo}/pull/new/${branch}`
    console.log('ðŸŒŽ create new PR: ' + createPullURL + '\n')
    open(createPullURL)

    process.exit(0)

  } catch (e) {
    console.log(e)
    process.exit(1)
  }
}

main()
